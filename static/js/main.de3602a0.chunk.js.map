{"version":3,"sources":["assets/platform.png","assets/sky.png","assets/star.png","assets/dude.png","constants/index.js","scenes/Boot.js","sprites/Player.js","sprites/Star.js","texts/Score.js","scenes/Main.js","index.js"],"names":["ANIMATIONS","LEFT","RIGHT","TURN","SCENES","BOOT","MAIN","TEXTURES","DUDE","GROUND","SKY","STAR","Scene","window","Phaser","GameObjects","Player","Sprite","constructor","scene","x","y","texture","frame","super","add","existing","this","physics","world","enable","body","setBounceY","setCollideWorldBounds","cursors","input","keyboard","createCursorKeys","init","anims","create","key","frames","generateFrameNumbers","start","end","frameRate","repeat","update","left","isDown","setVelocityX","play","right","up","touching","down","setVelocityY","Math","Physics","Star","Arcade","setOrigin","FloatBetween","scoreTemplate","score","Score","Text","text","style","setScore","Game","Scale","width","height","title","url","process","version","preload","load","image","require","default","spritesheet","frameWidth","frameHeight","game","config","platforms","staticGroup","defaultKey","get","setScale","refreshBody","forEach","coordinates","stars","group","classType","i","collider","player","overlap","collectStar","scoreText","fill","fontFamily","fontSize","star","disableBody","time","delta","arcade","gravity","debug","disableContextMenu","backgroundColor","scale","mode","FIT","autoCenter","CENTER_BOTH"],"mappings":"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","file":"static/js/main.de3602a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/platform.69db09bf.png\";","export default __webpack_public_path__ + \"static/media/sky.47a86b19.png\";","export default __webpack_public_path__ + \"static/media/star.a7cb585c.png\";","export default __webpack_public_path__ + \"static/media/dude.526a78a9.png\";","export const ANIMATIONS = {\n  LEFT: 'LEFT',\n  RIGHT: 'RIGHT',\n  TURN: 'TURN',\n};\n\nexport const SCENES = {\n  BOOT: 'BOOT',\n  MAIN: 'MAIN',\n};\n\nexport const TEXTURES = {\n  DUDE: 'DUDE',\n  GROUND: 'GROUND',\n  SKY: 'SKY',\n  STAR: 'STAR',\n};\n\nexport default {\n  ANIMATIONS,\n  SCENES,\n  TEXTURES,\n};\n","import { SCENES, TEXTURES } from '../constants';\n\nconst { Scene } = window.Phaser;\n\nexport default class Boot extends Scene {\n  constructor() {\n    super({ key: SCENES.BOOT });\n  }\n\n  preload() {\n    const { load } = this;\n    load.image(TEXTURES.GROUND, require('../assets/platform.png').default);\n    load.image(TEXTURES.SKY, require('../assets/sky.png').default);\n    load.image(TEXTURES.STAR, require('../assets/star.png').default);\n    load.spritesheet(TEXTURES.DUDE, require('../assets/dude.png').default, {\n      frameWidth: 32,\n      frameHeight: 48,\n    });\n  }\n\n  create() {\n    this.scene.start(SCENES.MAIN);\n  }\n}\n","import { ANIMATIONS, TEXTURES } from '../constants';\n\nconst { GameObjects } = window.Phaser;\n\nconst HORIZONTAL_SPEED = 160;\nconst VERTICAL_SPEED = 330;\n\nexport default class Player extends GameObjects.Sprite {\n  constructor(scene, x, y, texture, frame) {\n    super(scene, x, y, TEXTURES.DUDE);\n\n    // Add the sprite to the scene.\n    scene.add.existing(this);\n\n    // Enable physics for the sprite.\n    scene.physics.world.enable(this);\n\n    // Player physics properties. Give the little guy some bounce.\n    this.body.setBounceY(0.2).setCollideWorldBounds(true);\n\n    // Add cursor keys.\n    this.cursors = scene.input.keyboard.createCursorKeys();\n  }\n\n  init() {\n    const { anims } = this.scene;\n\n    // Create left animation.\n    anims.create({\n      key: ANIMATIONS.LEFT,\n      frames: anims.generateFrameNumbers(TEXTURES.DUDE, {\n        start: 0,\n        end: 3,\n      }),\n      frameRate: 10,\n      repeat: -1,\n    });\n\n    // Create turn animation.\n    anims.create({\n      key: ANIMATIONS.TURN,\n      frames: [{ key: TEXTURES.DUDE, frame: 4 }],\n      frameRate: 20,\n    });\n\n    // Create right animation.\n    anims.create({\n      key: ANIMATIONS.RIGHT,\n      frames: anims.generateFrameNumbers(TEXTURES.DUDE, {\n        start: 5,\n        end: 8,\n      }),\n      frameRate: 10,\n      repeat: -1,\n    });\n\n    return this;\n  }\n\n  update() {\n    const { anims, body, cursors } = this;\n\n    switch (true) {\n      // Move to the left.\n      case cursors.left.isDown:\n        body.setVelocityX(-HORIZONTAL_SPEED);\n        anims.play(ANIMATIONS.LEFT, true);\n        break;\n      // Move to the right.\n      case cursors.right.isDown:\n        body.setVelocityX(HORIZONTAL_SPEED);\n        anims.play(ANIMATIONS.RIGHT, true);\n        break;\n      // Stand still.\n      default:\n        body.setVelocityX(0);\n        anims.play(ANIMATIONS.TURN);\n        break;\n    }\n\n    // Allow player to jump if sprite is touching the ground.\n    if (cursors.up.isDown && body.touching.down) {\n      body.setVelocityY(-VERTICAL_SPEED);\n    }\n  }\n}\n","import { TEXTURES } from '../constants';\n\nconst { Math, Physics } = window.Phaser;\n\nexport default class Star extends Physics.Arcade.Sprite {\n  constructor(scene, x, y, texture, frame) {\n    super(scene, x, y, TEXTURES.STAR);\n\n    // Reset drawing position of image to the top-left.\n    this.setOrigin(0);\n  }\n\n  init() {\n    // Give the sprite some bounce.\n    this.body.setBounceY(Math.FloatBetween(0.4, 0.8));\n  }\n}\n","const { GameObjects } = window.Phaser;\n\n/**\n * Template for displaying the score.\n *\n * @param  {Number} score\n * @return {String}\n */\nconst scoreTemplate = score => `Score: ${score}`;\n\nexport default class Score extends GameObjects.Text {\n  constructor(scene, x, y, text, style) {\n    super(scene, x, y, scoreTemplate(text), style);\n\n    // Add text to the scene.\n    scene.add.existing(this);\n  }\n\n  /**\n   * Updates the score text.\n   *\n   * @param {Number} score\n   */\n  setScore = score => {\n    this.text = scoreTemplate(score);\n  };\n}\n","import { Player, Star } from '../sprites';\nimport { SCENES, TEXTURES } from '../constants';\nimport { Score } from '../texts';\n\nconst { Scene } = window.Phaser;\n\nexport default class Main extends Scene {\n  constructor() {\n    super({ key: SCENES.MAIN });\n  }\n\n  create() {\n    const {\n      game: {\n        config: { height },\n      },\n      physics,\n    } = this;\n\n    // A simple background for our game.\n    this.add.image(0, 0, TEXTURES.SKY).setOrigin(0);\n\n    // The platforms group contains the ground and the 2 ledges we can jump on.\n    // It's created after the background so the order of layers (z-depth) is\n    // maintained (otherwise, the platforms will be hidden by the background).\n    const platforms = physics.add.staticGroup({\n      defaultKey: TEXTURES.GROUND,\n    });\n\n    // Create the ground (scale it to fit the widt of the game and scale it to\n    // fit the width of the game). The original sprite is 400x32 in size.\n    platforms\n      .get(0, height - 64)\n      .setOrigin(0)\n      .setScale(2)\n      .refreshBody();\n\n    // Now let's create three ledges.\n    [\n      [600, 400],\n      [50, 250],\n      [750, 220],\n    ].forEach(coordinates => {\n      platforms.get(...coordinates);\n    });\n\n    // Create stars group.\n    const stars = physics.add.group({\n      classType: Star,\n    });\n\n    // Here we'll create 12 of them evenly spaced apart.\n    for (let i = 0; i < 12; i++) {\n      stars.get(i * 70, 0).init();\n    }\n\n    // Collide the star with the platform or else the star will fall through.\n    physics.add.collider(stars, platforms);\n\n    // Create player.\n    const player = new Player(this, 32, height - 150).init();\n    this.player = player;\n\n    // Collide the player with the platform or else the player will fall through.\n    physics.add.collider(player, platforms);\n\n    // Check for overlap between the player and the star.\n    physics.add.overlap(player, stars, this.collectStar, null, this);\n\n    // Display score.\n    this.score = 0;\n    this.scoreText = new Score(this, 16, 16, this.score, {\n      fill: '#fff',\n      fontFamily: '\"Lucida Grande\", Helvetica, Arial, sans-serif',\n      fontSize: 32,\n    });\n  }\n\n  collectStar(player, star) {\n    // Make the star inactive and invisible.\n    star.disableBody(true, true);\n\n    // Add to the score and update the text.\n    this.score += 10;\n    this.scoreText.setScore(this.score);\n  }\n\n  update(time, delta) {\n    this.player.update();\n  }\n}\n","import './index.css';\nimport { Boot, Main } from './scenes';\n// import * as serviceWorker from './serviceWorker';\n\nconst { Game, Scale } = window.Phaser;\n\n/**\n * @see {@link https://photonstorm.github.io/phaser3-docs/global.html#GameConfig}\n */\nconst config = {\n  width: 800,\n  height: 600,\n  title: 'Phaser Template',\n  // see `.env` and `package.json`\n  url: process.env.WEB_APP_HOMEPAGE,\n  version: process.env.WEB_APP_VERSION,\n  scene: [Boot, Main],\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: process.env.NODE_ENV === 'development',\n    },\n  },\n  disableContextMenu: true,\n  backgroundColor: '#000',\n  scale: {\n    mode: Scale.FIT,\n    autoCenter: Scale.CENTER_BOTH,\n  },\n};\n\nnew Game(config);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}